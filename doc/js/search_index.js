var search_data = {"index":{"searchIndex":["guard","cunit","cunitparser","runner","cunitguard","dsl","object","tempprjenv","testoutput","cleanup_tmp_prj_dir()","create_tmp_prj_dir()","cunit_output()","cunit_runner()","failures_output()","fake_test_exe()","full_output()","get_failures()","get_summary()","guardfile_has_unit_test_exe()","libdir()","limit_to_rows()","limit_to_rows!()","new()","new()","new()","new()","parse_output()","popen_failing_fake()","popen_successfull_fake()","run()","run_all()","run_clean()","run_make()","run_on_change()","run_task()","run_tests()","set_builder()","set_builder()","set_cleaner()","set_cleaner()","set_libdir()","set_runner()","gemfile","guardfile","rakefile","guardfile"],"longSearchIndex":["guard","guard::cunit","guard::cunit::cunitparser","guard::cunit::runner","guard::cunitguard","guard::dsl","object","tempprjenv","testoutput","tempprjenv::cleanup_tmp_prj_dir()","tempprjenv::create_tmp_prj_dir()","guard::cunit::cunitparser#cunit_output()","guard::dsl#cunit_runner()","guard::cunit::cunitparser#failures_output()","object#fake_test_exe()","guard::cunit::cunitparser#full_output()","guard::cunit::cunitparser#get_failures()","guard::cunit::cunitparser#get_summary()","object#guardfile_has_unit_test_exe()","guard::dsl#libdir()","testoutput#limit_to_rows()","testoutput#limit_to_rows!()","guard::cunit::new()","guard::cunit::cunitparser::new()","guard::cunit::runner::new()","guard::dsl::new()","guard::cunit::cunitparser#parse_output()","object#popen_failing_fake()","object#popen_successfull_fake()","guard::cunit::runner#run()","guard::cunit#run_all()","guard::cunit::runner#run_clean()","guard::cunit::runner#run_make()","guard::cunit#run_on_change()","guard::cunit::runner#run_task()","guard::cunit::runner#run_tests()","guard::cunit::runner::set_builder()","guard::dsl#set_builder()","guard::cunit::runner::set_cleaner()","guard::dsl#set_cleaner()","guard::cunit::runner::set_libdir()","guard::cunit::runner::set_runner()","","","",""],"info":[["Guard","","Guard.html","","<p>version\n"],["Guard::Cunit","","Guard/Cunit.html","","<p>main child class of Guard to nherit guard’s behaviour\n"],["Guard::Cunit::CunitParser","","Guard/Cunit/CunitParser.html","",""],["Guard::Cunit::Runner","","Guard/Cunit/Runner.html","","<p>the class implements running and handling of results of the tasks that made\nup the cunit guard\n"],["Guard::CunitGuard","","Guard/CunitGuard.html","",""],["Guard::Dsl","","Guard/Dsl.html","","<p>add more behaviour to Guard’s DSL to be able to configure executors  of all\nthe CUnit’s Guard tasks\n"],["Object","","Object.html","",""],["TempPrjEnv","","TempPrjEnv.html","","<p>a class to set/cleanup environment for fake project\n"],["TestOutput","","TestOutput.html","",""],["cleanup_tmp_prj_dir","TempPrjEnv","TempPrjEnv.html#method-c-cleanup_tmp_prj_dir","()","<p>cleanup the subdir\n"],["create_tmp_prj_dir","TempPrjEnv","TempPrjEnv.html#method-c-create_tmp_prj_dir","()","<p>create a tmp subdir and within it fake project directory\n"],["cunit_output","Guard::Cunit::CunitParser","Guard/Cunit/CunitParser.html#method-i-cunit_output","()","<p>display summary of the suites/tests/asserts\n"],["cunit_runner","Guard::Dsl","Guard/Dsl.html#method-i-cunit_runner","(name)","<p>dsl call to set cunit test executable\n"],["failures_output","Guard::Cunit::CunitParser","Guard/Cunit/CunitParser.html#method-i-failures_output","()","<p>display failures output\n"],["fake_test_exe","Object","Object.html#method-i-fake_test_exe","(exe_name,successful = :fail)","<p>fake the test executable runner, its existance and result\n"],["full_output","Guard::Cunit::CunitParser","Guard/Cunit/CunitParser.html#method-i-full_output","()","<p>copy of the cunit output\n"],["get_failures","Guard::Cunit::CunitParser","Guard/Cunit/CunitParser.html#method-i-get_failures","()","<p>find failures from Cunit test report\n"],["get_summary","Guard::Cunit::CunitParser","Guard/Cunit/CunitParser.html#method-i-get_summary","()","<p>find summary of the cunit test reprot\n"],["guardfile_has_unit_test_exe","Object","Object.html#method-i-guardfile_has_unit_test_exe","(params={ :test_exe=>nil, :builder=>nil, :cleaner=>nil, :libdir=>nil})","<p>a generator for CUnit Guardfile\n"],["libdir","Guard::Dsl","Guard/Dsl.html#method-i-libdir","(name)","<p>dsl call to set dir, where library under test is generated, by default\ncurrent dir\n"],["limit_to_rows","TestOutput","TestOutput.html#method-i-limit_to_rows","(number_of_rows)","<p>limit the output to given nr rows\n"],["limit_to_rows!","TestOutput","TestOutput.html#method-i-limit_to_rows-21","(number_of_rows)","<p>bang version\n"],["new","Guard::Cunit","Guard/Cunit.html#method-c-new","(watchers = [], options = {})","<p>new method that also creates the runner class\n"],["new","Guard::Cunit::CunitParser","Guard/Cunit/CunitParser.html#method-c-new","(task_output = nil)","<p>constructor\n"],["new","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-c-new","()",""],["new","Guard::Dsl","Guard/Dsl.html#method-c-new","()","<p>put default values to task executors\n"],["parse_output","Guard::Cunit::CunitParser","Guard/Cunit/CunitParser.html#method-i-parse_output","( task_output )","<p>get cunit output\n"],["popen_failing_fake","Object","Object.html#method-i-popen_failing_fake","(fakename)","<p>setup stub for system command with failing exit result\n"],["popen_successfull_fake","Object","Object.html#method-i-popen_successfull_fake","(fakename)","<p>setup stub for system command with successful exit result\n"],["run","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-i-run","()","<p>run them all\n"],["run_all","Guard::Cunit","Guard/Cunit.html#method-i-run_all","()","<p>Called when just `enter` is pressed This method should be principally used\nfor long action like running …\n"],["run_clean","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-i-run_clean","()","<p>run clean before each run all start with clean\n"],["run_make","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-i-run_make","()","<p>run make command to build the project\n"],["run_on_change","Guard::Cunit","Guard/Cunit.html#method-i-run_on_change","(paths)",""],["run_task","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-i-run_task","(task_executable)","<p>run one phase of the guard via a system command/executable\n"],["run_tests","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-i-run_tests","()","<p>run unit tests via cunit executable\n"],["set_builder","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-c-set_builder","(name)","<p>set command to run to prepare build\n"],["set_builder","Guard::Dsl","Guard/Dsl.html#method-i-set_builder","(name)","<p>dsl call to set cunit build command/script, by default make\n"],["set_cleaner","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-c-set_cleaner","(name)","<p>set cleaner script/exe/command\n"],["set_cleaner","Guard::Dsl","Guard/Dsl.html#method-i-set_cleaner","(name)","<p>dsl call to set cunit clean command/script, by default ‘make clean’\n"],["set_libdir","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-c-set_libdir","(name)","<p>set directory where library under test is generated\n"],["set_runner","Guard::Cunit::Runner","Guard/Cunit/Runner.html#method-c-set_runner","(name)","<p>set the executable file name to run CUNIT tests\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p># Specify your gem’s dependencies in guard-cunit.gemspec gemspec gem\n‘guard’, …\n"],["Guardfile","","Guardfile.html","","<p># A sample Guardfile # More info at github.com/guard/guard#readme\n<p>guard ‘rspec’, :version =&gt; 2 do\n\n<pre>watch(%r{^spec/.+_spec\\.rb$}) ...</pre>\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require ‘rspec/core/rake_task’\n<p>Bundler::GemHelper.install_tasks …\n"],["Guardfile","","lib/guard/cunit/templates/Guardfile.html","","<p># # Cunit Guardfile - keep dflt builders after guard watcher’s block #\nguard ‘cunit’ do\n\n<pre>watch(%r{((.+)\\.c$)|((.+)\\.h$)|((M|m)akefile$)} ...</pre>\n"]]}}